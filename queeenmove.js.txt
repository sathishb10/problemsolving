
var arr=[]
function matrix(n,x,y){
    for(var i=0;i<n;i++){
  var str=[]
    for(var j=0;j<n;j++){
             if( i==x && j==y){
                 str.push("k")
             }
             else{
                 str.push("0")               
             }
    }
arr.push(str)
}
// return arr;
}

function upper(n,x,y){
    str=[];
   i=x-1;
   while(i>=0){
    arr[i][y]="."
    str.push([i,y])
i-=1
   }
   return str;
}

function lower(n,x,y){
    str=[];
    i=x+1;
    while(i<n){
        arr[i][y]="."
        str.push([i,y])
        i+=1;
    }
    return str;
    
}

function left(n,x,y){
    str=[];
    i=y-1;
    while(i>=0){
        arr[x][i]="."
str.push([x,i])
i-=1;
    }
return str;
}
function right(n,x,y){

    str=[];
    i=y+1;
    while(i<n){
        arr[x][i]="."
    str.push([x,i])
    i+=1
    }
return str
}
function diagonalleftUpper(n,x,y){
  var  str=[]
    i=x-1;
    j=y-1;
    while(i>=0&&j>=0){
        arr[i][j]="."
        str.push([i,j])
        i -=1;
        j -=1;
    }
   return str;
}
function diagonalrightUpper(n,x,y){
  var  str=[]
    i=x-1;
    j=y+1;
    while(i>=0&&j<n){
        arr[i][j]="."
        str.push([i,j])

i-=1;
j+=1
    }
   return str;

}
function diagonalleftlower(n,x,y){
  var  str=[]
    i=x+1;
    j=y-1;
    while(i<n&&j>=0){
        arr[i][j]="."
        str.push([i,j])
    i+=1;
    j-=1
    }
   return str;

}
function diagonalrightlower(n,x,y){
  var  str=[]
    i=x+1;
    j=y+1;
    while(i<n&&j<n){
        arr[i][j]="."
        str.push([i,j])
        i+=1;
        j  +=1;
    }
   return str;
}

function kingmoves(n,x,y){
console.log(matrix(n,x,y))
console.log(upper(n,x,y))
console.log(lower(n,x,y))
console.log(left(n,x,y))
console.log(right(n,x,y))
console.log(diagonalleftUpper(n,x,y))
console.log(diagonalrightUpper(n,x,y))
console.log(diagonalleftlower(n,x,y))
console.log(diagonalrightlower(n,x,y))
console.log(arr);

}
kingmoves(8,4,4)










[ [ 3, 4 ], [ 2, 4 ], [ 1, 4 ], [ 0, 4 ] ]
[ [ 5, 4 ], [ 6, 4 ], [ 7, 4 ] ]
[ [ 4, 3 ], [ 4, 2 ], [ 4, 1 ], [ 4, 0 ] ]
[ [ 4, 5 ], [ 4, 6 ], [ 4, 7 ] ]
[ [ 3, 3 ], [ 2, 2 ], [ 1, 1 ], [ 0, 0 ] ]
[ [ 3, 5 ], [ 2, 6 ], [ 1, 7 ] ]
[ [ 5, 3 ], [ 6, 2 ], [ 7, 1 ] ]
[ [ 5, 5 ], [ 6, 6 ], [ 7, 7 ] ]
[ [ '.', '0', '0', '0', '.', '0', '0', '0' ],
  [ '0', '.', '0', '0', '.', '0', '0', '.' ],
  [ '0', '0', '.', '0', '.', '0', '.', '0' ],
  [ '0', '0', '0', '.', '.', '.', '0', '0' ],
  [ '.', '.', '.', '.', 'k', '.', '.', '.' ],
  [ '0', '0', '0', '.', '.', '.', '0', '0' ],
  [ '0', '0', '.', '0', '.', '0', '.', '0' ],
  [ '0', '.', '0', '0', '.', '0', '0', '.' ] ]